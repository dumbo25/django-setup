# configuration file for django.sh

# ***** change these variables to match your needs *******
SuperUserName='admin'            # do not use these, useyour own
SuperUserPassword='admin'
SuperUserEmail='admin@gmail.com'
BaseDirectory='/www/var'         # where everything will be stored (/www/var or /home/pi)
Name="Django Project"            # the name of the project, which can be any quoted string
DjangoProject="TestProject"      # Directory under BaseDirectory for the project
# ***** END of change variables to match your needs *******

# ***** optionally change these to meet your needs *******
HOME=$(bash -c "cd ~$(printf %q $USER) && pwd")
  #   minimum Python Version
MinimumPythonVersion="3.7"
MinimumPip3Version="18.1"
# ***** END of optional variables to meet your needs *******


# do not edit below unless intentionally changing the code
VirtualDirectory="/v_$DjangoProject"
NoVirtualEnvDjangoDirectory=""

MinimumDjangoVersion="3.2.8"

# Help message
read -r -d '' Help <<- EOM
${Bold}NAME${Normal}
     django.sh sets up a simple Django website to run on a headless Raspberry Pi
     in a virtual environment using python3, apache2 and wsgi. The webserver can 
     be viewed in a browser from a laptop on the Raspberry Pi's network.

${Bold}SYNOPSIS${Normal}
     bash [-bashOptions] django.sh [-installOptions]

${Bold}DESCRIPTION${Normal}
     The django.sh script sets up the project, apps and directories for a simple
     django website.

     In case a mistake is made in playing around with the system, the django
     script overwrites previous installs, bringing it back to a known good state

     Most tutorials set up a webserver to run on loacalhost or 127.0.0.1, which 
     stops short of being useful. A webserver should run on a central server and
     not on a laptop, and should be accessible by other computers on a home's 
     LAN.

${Bold}USAGE${Normal}
     django.sh creates a script called server.sh, which can be run:

          bash server.sh

     to start the virtual environment and providing the URI to enter into a 
     browser. If the -v option is used, server.sh can still be used to start
     the webserver/

     django.cfg contains items that can be edited, and in some cases should be 
     edited. For example, these variables should be edited to meet your needs:

         SuperUserName='admin'
         SuperUserPassword='admin'
         SuperUserEmail='admin@gmail.com'
         BaseDirectory="/var/www"
         Name="Django Project"
         DjangoProject="TestProject"
         MinimumPythonVersion="3.7"
         MinimumPip3Version="18.1"

${Bold}OPTIONS${Normal}
     c    Clear the terminal after update and upgrade
     h    This help
     u    Skip update and upgrade (not recommended)
     v    Do not use a virtual environment and do not create v_$DjangoProject

${Bold}TUTORIAL${Normal}
     https://sites.google.com/site/cartwrightraspberrypiprojects/microsd-card-duplicator

${Bold}DEBUGGING${Normal}
     If there are issues, then check the logs:
          cat /var/log/apache2/access.log
          cat /var/log/apache2/error.log
     and scan through the output of django.sh to see if anything failed

EOM


# list of all the django apps to create, used with:
#    cd ~/"$Project"
#    django-admin startapp <each DjangoApp>
declare -a DjangoApps=("newt" "polls")

# list of all raspbian packages to install
# it's okay if something is already installed. It will check before installing and not install again
declare -a DebianPackages=("python3" "python3-venv" "python3-pip" "sqlite3" "apache2" "apache2-dev"  "libapache2-mod-wsgi-py3")

# list of python packages to install
declare -a Pip3Packages=("virtualenv" "virtualenvwrapper")

# Files to get from github
declare -a GitFiles=(\
)

# get a github repository
GitClone=""

# Files
# Bash doesn't have multidimensional tables. So, this is my hack to pretend it does
# Each enttry is a row in a table and includes: "filename;fromPath;toPath"
#   do not put / at end of toPath or fromPath
#   to create a path and its directories: ";;toPath"
declare -a MoveFiles=(\
)

# The script is not run as sudo.
# This structure and the associated function in django.sh changes 
# ownership to the correct owner. Each entry contains 1) either a filename with path 
# or a path, and 2) its ownership
#
# Each column in the row is separated by ;
#
# If only a directory is given, then chown is done on all subdirectories and files
# So, Change only has to be done on /var/www and it will change /var/www/hmtl,
# /var/www/css, /var/www/images, /var/www/html/index.htm and so on
declare -a ChangeOwnership=(\
)

declare -a ChangePermissions=(\
)

# remove files and directories that are not needed
# Always leave LICENSE.md and READ.md
declare -a CleanUp=(\
)

# list of services to reload
declare -a ReloadServices=("apache2.service")

# list of services to restart
declare -a RestartServices=("apache2.service")

